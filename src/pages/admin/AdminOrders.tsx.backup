import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../store/authStore';
import { useNavigate } from 'react-router-dom';
import { Package, Calendar, User, Phone, MapPin, DollarSign, LogOut, Trash2, Edit, Search } from 'lucide-react';
import { firebaseOrderService } from '../../services/firebaseOrderService';
import { FirebaseOrder } from '../../types/firebase';

const AdminOrders: React.FC = () => {
  const logout = useAuthStore((state) => state.logout);
  const navigate = useNavigate();
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [editingOrderId, setEditingOrderId] = useState<string | null>(null);
  const [tempOrderData, setTempOrderData] = useState<any>(null);
  const [orders, setOrders] = useState<FirebaseOrder[]>([]);
  const [loading, setLoading] = useState(true);

  // Load orders from Firebase
  useEffect(() => {
    const loadOrders = async () => {
      try {
        setLoading(true);
        const firebaseOrders = await firebaseOrderService.getAllOrders();
        console.log('🔍 DEBUG - Firebase orders data:', firebaseOrders);
        setOrders(firebaseOrders);
      } catch (error) {
        console.error('Error loading orders from Firebase:', error);
        setOrders([]);
      } finally {
        setLoading(false);
      }
    };

    loadOrders();
  }, []);

  const handleLogout = () => {
    logout();
    navigate('/admin-login');
  };

  const handleStatusChange = async (orderId: string, newStatus: string) => {
    try {
      await firebaseOrderService.updateOrderStatus(orderId, newStatus);
      // Refresh orders after update
      const updatedOrders = await firebaseOrderService.getAllOrders();
      setOrders(updatedOrders);
    } catch (error) {
      console.error('Error updating order status:', error);
      alert('Failed to update order status. Please try again.');
    }
  };

  const handleDeleteOrder = async (orderId: string) => {
    if (window.confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
      try {
        await firebaseOrderService.deleteOrder(orderId);
        // Refresh orders after deletion
        const updatedOrders = await firebaseOrderService.getAllOrders();
        setOrders(updatedOrders);
      } catch (error) {
        console.error('Error deleting order:', error);
        alert('Failed to delete order. Please try again.');
      }
    }
  };
  const updatedOrders = getAllOrders() || [];
  setOrders(updatedOrders);
}
  };

const handleEditOrder = (order: any) => {
  setEditingOrderId(order.id);
  setTempOrderData({
    customerDetails: { ...order.customerDetails },
    deliveryDate: order.deliveryDate,
    deliveryTime: order.deliveryTime,
    status: order.status
  });
};

const handleSaveEdit = (orderId: string) => {
  if (tempOrderData) {
    updateOrderDetails(orderId, tempOrderData);
    setEditingOrderId(null);
    setTempOrderData(null);
    // Refresh orders after update
    const updatedOrders = getAllOrders() || [];
    setOrders(updatedOrders);
  }
};

const handleCancelEdit = () => {
  setEditingOrderId(null);
  setTempOrderData(null);
};

const handleTempDataChange = (field: string, value: any) => {
  setTempOrderData((prev: any) => ({
    ...prev,
    [field]: value
  }));
};

const handleCustomerDetailsChange = (field: string, value: string) => {
  setTempOrderData((prev: any) => ({
    ...prev,
    customerDetails: {
      ...prev.customerDetails,
      [field]: value
    }
  }));
};

const filteredOrders = orders.filter(order => {
  if (!order) return false; // Add null check

  const matchesStatus = filterStatus === 'all' || order.status === filterStatus;
  const matchesSearch = searchTerm === '' ||
    order.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customerDetails?.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customerDetails?.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customerDetails?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customerDetails?.phone?.toLowerCase().includes(searchTerm.toLowerCase());
  return matchesStatus && matchesSearch;
});

const getStatusColor = (status: string) => {
  switch (status) {
    case 'pending': return 'bg-yellow-100 text-yellow-800';
    case 'processing': return 'bg-blue-100 text-blue-800';
    case 'delivered': return 'bg-green-100 text-green-800';
    case 'cancelled': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};

// Show loading state
if (loading) {
  return (
    <div className="min-h-screen bg-background py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white shadow-sm rounded-lg p-8 text-center">
          <p className="text-gray-500">Loading orders...</p>
        </div>
      </div>
    </div>
  );
}

return (
  <div className="min-h-screen bg-background py-8">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      {/* Header */}
      <div className="bg-white shadow-sm rounded-lg mb-8">
        <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-text">Order Management</h1>
          <div className="flex space-x-4">
            <button
              onClick={() => navigate('/admin')}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-text bg-white hover:bg-background"
            >
              Back to Products
            </button>
            <button
              onClick={handleLogout}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-text bg-white hover:bg-background"
            >
              <LogOut className="h-5 w-5 mr-2" />
              Logout
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white shadow-sm rounded-lg mb-6 p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex items-center space-x-4">
            <label className="text-sm font-medium text-text">Filter by status:</label>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 text-sm"
            >
              <option value="all">All Orders</option>
              <option value="pending">Pending</option>
              <option value="processing">Processing</option>
              <option value="delivered">Delivered</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
          <div className="flex items-center space-x-4">
            <label className="text-sm font-medium text-text">Search:</label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search by ID, name, email, or phone"
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-md text-sm w-80"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Orders List */}
      <div className="space-y-4">
        {filteredOrders.length === 0 ? (
          <div className="bg-white shadow-sm rounded-lg p-8 text-center">
            <p className="text-gray-500">No orders found.</p>
          </div>
        ) : (
          filteredOrders.map((order) => {
            if (!order) return null; // Add null check

            return (
              <div key={order.id} className="bg-white shadow-sm rounded-lg overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">
                        Order #{order.id}
                      </h3>
                      <p className="text-sm text-gray-500">
                        Placed on {order.orderDate ? new Date(order.orderDate).toLocaleDateString() : 'Unknown date'}
                      </p>
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(editingOrderId === order.id ? tempOrderData?.status || order.status || 'unknown' : order.status || 'unknown')}`}>
                        {editingOrderId === order.id ?
                          (tempOrderData?.status || order.status || 'Unknown').charAt(0).toUpperCase() + (tempOrderData?.status || order.status || 'Unknown').slice(1) :
                          (order.status || 'Unknown').charAt(0).toUpperCase() + (order.status || 'Unknown').slice(1)
                        }
                      </span>
                      <select
                        value={editingOrderId === order.id ? tempOrderData?.status || order.status || 'pending' : order.status || 'pending'}
                        onChange={(e) => editingOrderId === order.id ? handleTempDataChange('status', e.target.value) : handleStatusChange(order.id, e.target.value)}
                        className="border border-gray-300 rounded-md px-3 py-1 text-sm"
                        disabled={editingOrderId === order.id ? false : false}
                      >
                        <option value="pending">Pending</option>
                        <option value="processing">Processing</option>
                        <option value="delivered">Delivered</option>
                        <option value="cancelled">Cancelled</option>
                      </select>
                      <button
                        onClick={() => handleEditOrder(order)}
                        className={`p-2 rounded-md ${editingOrderId !== null && editingOrderId !== order.id
                          ? 'text-gray-400 cursor-not-allowed'
                          : 'text-blue-600 hover:text-blue-800 hover:bg-blue-50'
                          }`}
                        title={editingOrderId !== null && editingOrderId !== order.id ? 'Finish editing other order first' : 'Edit order'}
                        disabled={editingOrderId !== null && editingOrderId !== order.id}
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDeleteOrder(order.id)}
                        className="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md"
                        title="Delete order"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>

                  {/* Customer Information */}
                  <div className="bg-gray-50 rounded-lg p-4 mb-4">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-gray-900">Customer Information</h4>
                      {editingOrderId === order.id && (
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleSaveEdit(order.id)}
                            className="px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700"
                          >
                            Save
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            className="px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700"
                          >
                            Cancel
                          </button>
                        </div>
                      )}
                    </div>
                    {order.customerDetails ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center space-x-2">
                          <User className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-500">Name:</span>
                          {editingOrderId === order.id ? (
                            <div className="flex space-x-2">
                              <input
                                type="text"
                                value={tempOrderData?.customerDetails?.firstName || ''}
                                onChange={(e) => handleCustomerDetailsChange('firstName', e.target.value)}
                                className="px-2 py-1 border rounded text-xs w-20"
                                placeholder="First"
                              />
                              <input
                                type="text"
                                value={tempOrderData?.customerDetails?.lastName || ''}
                                onChange={(e) => handleCustomerDetailsChange('lastName', e.target.value)}
                                className="px-2 py-1 border rounded text-xs w-20"
                                placeholder="Last"
                              />
                            </div>
                          ) : (
                            <span>{order.customerDetails.firstName || 'N/A'} {order.customerDetails.lastName || 'N/A'}</span>
                          )}
                        </div>
                        <div className="flex items-center space-x-2">
                          <Phone className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-500">Phone:</span>
                          {editingOrderId === order.id ? (
                            <input
                              type="text"
                              value={tempOrderData?.customerDetails?.phone || ''}
                              onChange={(e) => handleCustomerDetailsChange('phone', e.target.value)}
                              className="px-2 py-1 border rounded text-xs w-32"
                            />
                          ) : (
                            <span>{order.customerDetails.phone || 'N/A'}</span>
                          )}
                        </div>
                        <div className="flex items-center space-x-2 md:col-span-2">
                          <MapPin className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-500">Address:</span>
                          {editingOrderId === order.id ? (
                            <div className="flex space-x-2 flex-wrap">
                              <input
                                type="text"
                                value={tempOrderData?.customerDetails?.address || ''}
                                onChange={(e) => handleCustomerDetailsChange('address', e.target.value)}
                                className="px-2 py-1 border rounded text-xs w-40"
                                placeholder="Address"
                              />
                              <input
                                type="text"
                                value={tempOrderData?.customerDetails?.city || ''}
                                onChange={(e) => handleCustomerDetailsChange('city', e.target.value)}
                                className="px-2 py-1 border rounded text-xs w-24"
                                placeholder="City"
                              />
                              <input
                                type="text"
                                value={tempOrderData?.customerDetails?.postalCode || ''}
                                onChange={(e) => handleCustomerDetailsChange('postalCode', e.target.value)}
                                className="px-2 py-1 border rounded text-xs w-20"
                                placeholder="Postal"
                              />
                            </div>
                          ) : (
                            <span>{order.customerDetails.address || 'N/A'}, {order.customerDetails.city || 'N/A'} {order.customerDetails.postalCode || 'N/A'}</span>
                          )}
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className="text-gray-500">Email:</span>
                          {editingOrderId === order.id ? (
                            <input
                              type="email"
                              value={tempOrderData?.customerDetails?.email || ''}
                              onChange={(e) => handleCustomerDetailsChange('email', e.target.value)}
                              className="px-2 py-1 border rounded text-xs w-40"
                            />
                          ) : (
                            <span>{order.customerDetails.email || 'N/A'}</span>
                          )}
                        </div>
                        {(order.customerDetails.notes || editingOrderId === order.id) && (
                          <div className="md:col-span-2 mt-2">
                            <span className="text-gray-500 font-medium">Special Instructions:</span>
                            {editingOrderId === order.id ? (
                              <textarea
                                value={tempOrderData?.customerDetails?.notes || ''}
                                onChange={(e) => handleCustomerDetailsChange('notes', e.target.value)}
                                className="w-full px-2 py-1 border rounded text-xs mt-1"
                                rows={2}
                                placeholder="Special instructions..."
                              />
                            ) : (
                              <p className="text-gray-700 mt-1">{order.customerDetails.notes}</p>
                            )}
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="text-sm text-gray-500">
                        Customer details not available for this order.
                      </div>
                    )}
                  </div>

                  {/* Delivery Information */}
                  <div className="bg-gray-50 rounded-lg p-4 mb-4">
                    <h4 className="font-medium text-gray-900 mb-2">Delivery Information</h4>
                    <div className="flex items-center space-x-4 text-sm">
                      <div className="flex items-center space-x-2">
                        <Calendar className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-500">Date:</span>
                        {editingOrderId === order.id ? (
                          <input
                            type="date"
                            value={tempOrderData?.deliveryDate || ''}
                            onChange={(e) => handleTempDataChange('deliveryDate', e.target.value)}
                            className="px-2 py-1 border rounded text-xs"
                          />
                        ) : (
                          <span>{order.deliveryDate || 'N/A'}</span>
                        )}
                      </div>
                      <div className="flex items-center space-x-2">
                        <Package className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-500">Time:</span>
                        {editingOrderId === order.id ? (
                          <input
                            type="time"
                            value={tempOrderData?.deliveryTime || ''}
                            onChange={(e) => handleTempDataChange('deliveryTime', e.target.value)}
                            className="px-2 py-1 border rounded text-xs"
                          />
                        ) : (
                          <span>{order.deliveryTime || 'N/A'}</span>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Order Items */}
                  <div className="mb-4">
                    <h4 className="font-medium text-gray-900 mb-2">Order Items</h4>
                    <div className="space-y-2">
                      {/* Add null check and fallback for items */}
                      {order.items && Array.isArray(order.items) && order.items.length > 0 ? (
                        order.items.map((item, index) => (
                          <div key={index} className="flex justify-between items-center py-2 border-b border-gray-100 last:border-0">
                            <div className="flex items-center space-x-3">
                              <img
                                src={item.product?.image || '/placeholder-image.png'}
                                alt={item.product?.name || 'Product'}
                                className="h-12 w-12 object-cover rounded"
                              />
                              <div>
                                <p className="font-medium text-gray-900">{item.product?.name || 'Unknown Product'}</p>
                                <p className="text-sm text-gray-500">
                                  Qty: {item.quantity || 0} | {item.purchaseType || 'N/A'}
                                </p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="font-medium">PKR {((item.product?.price || 0) * (item.quantity || 0)).toFixed(2)}</p>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-sm text-gray-500 py-4">
                          No items found for this order.
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Order Total */}
                  <div className="border-t pt-4">
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-semibold flex items-center">
                        <DollarSign className="h-5 w-5 mr-1" />
                        Total
                      </span>
                      <span className="text-lg font-semibold">PKR {(order.total || 0).toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>
    </div>
  </div>
);
};

export default AdminOrders;